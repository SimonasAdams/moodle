{"version":3,"file":"modal_question_bank_bulkmove.min.js","sources":["../src/modal_question_bank_bulkmove.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Contain the logic for the bulkmove questions modal.\n *\n * @module     qbank_bulkmove/modal_question_bank_bulkmove\n * @copyright  2024 onwards Catalyst IT EU {@link https://catalyst-eu.net}\n * @author     Simon Adams <simon.adams@catalyst-eu.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Modal from 'core/modal';\nimport * as Fragment from 'core/fragment';\nimport {getString} from 'core/str';\nimport AutoComplete from 'core/form-autocomplete';\nimport {submitMoveQuestions} from 'qbank_bulkmove/repository';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\n\n\nexport default class ModalQuestionBankBulkmove extends Modal {\n    static TYPE = 'qbank_bulkmove/bulkmove';\n\n    static SELECTORS = {\n        SAVE_BUTTON: '[data-action=\"bulkmovesave\"]',\n        SELECTED_QUESTIONS: 'table#categoryquestions input[id^=\"checkq\"]',\n        SEARCH_BANK: '#searchbanks',\n        SEARCH_CATEGORY: '#searchcategories',\n        CATEGORY_OPTIONS: '#searchcategories option',\n        BANK_OPTIONS: '#searchbanks option',\n        CATEGORY_ENHANCED_INPUT: '.search-categories input',\n        ORIGINAL_SELECTS: 'select.bulk-move',\n        CATEGORY_WARNING: '#searchcatwarning',\n        CATEGORY_SUGGESTION: '.search-categories span.form-autocomplete-downarrow',\n        CONFIRM_BUTTON: '.bulk-move-footer button[data-action=\"save\"]',\n        CANCEL_BUTTON: '.bulk-move-footer button[data-action=\"cancel\"]'\n    };\n\n    static init(contextId, categoryId) {\n        document.addEventListener('click', (e) => {\n            const trigger = e.target;\n            if (trigger.className === 'dropdown-item' && trigger.getAttribute('name') === 'move') {\n                e.preventDefault();\n                ModalQuestionBankBulkmove.create({\n                    contextId,\n                    title: getString('bulkmoveheader', 'qbank_bulkmove'),\n                    show: true,\n                    categoryId: categoryId,\n                });\n            }\n        });\n    }\n\n    configure(modalConfig) {\n        this.setContextId(modalConfig.contextId);\n        this.setTargetBankContextId(modalConfig.contextId);\n        this.setTargetCategoryId(modalConfig.categoryId);\n        this.setCurrentCategoryId(modalConfig.categoryId);\n        modalConfig.removeOnClose = true;\n        super.configure(modalConfig);\n    }\n\n    /**\n     * @param {integer} contextId\n     */\n    setContextId(contextId) {\n        this.contextId = contextId;\n    }\n\n    /**\n     * @return {integer} contextId\n     */\n    getContextId() {\n        return this.contextId;\n    }\n\n    /**\n     * @param {integer} categoryId\n     */\n    setTargetCategoryId(categoryId) {\n        this.categoryId = categoryId;\n    }\n\n    /**\n     * @return {integer} categoryId\n     */\n    getTargetCategoryId() {\n        return this.categoryId;\n    }\n\n    /**\n     * @param {integer} currentCategoryId\n     */\n    setCurrentCategoryId(currentCategoryId) {\n        this.currentCategoryId = currentCategoryId;\n    }\n\n    /**\n     * @return {integer} currentCategoryId\n     */\n    getCurrentCategoryId() {\n        return this.currentCategoryId;\n    }\n\n    /**\n     * @param {integer} targetBankContextId\n     */\n    setTargetBankContextId(targetBankContextId) {\n        this.targetBankContextId = targetBankContextId  ? targetBankContextId : null;\n    }\n\n    /**\n     * @return {integer} targetBankContextId\n     */\n    getTargetBankContextId() {\n        return this.targetBankContextId;\n    }\n\n    /**\n     * @param {array} data with key as categoryid and value as questionbank contextid\n     */\n    setMappedData(data) {\n        this.mappedData = data;\n    }\n\n    /**\n     * @return {Array} mappedData\n     */\n    getMappedData() {\n        return this.mappedData;\n    }\n\n    show() {\n        void this.display(this.getContextId(), this.getCurrentCategoryId());\n        return super.show();\n    }\n\n    /**\n     * @param {integer} currentBankContextId\n     * @param {integer} currentCategoryId\n     */\n    async display(currentBankContextId, currentCategoryId) {\n        this.bodyPromise = await Fragment.loadFragment(\n            'qbank_bulkmove',\n            'bulk_move',\n            currentBankContextId,\n            {\n                'categoryid': currentCategoryId,\n            }\n        );\n\n        await this.setBody(this.bodyPromise);\n        await this.enhanceSelects(document.querySelectorAll(ModalQuestionBankBulkmove.SELECTORS.ORIGINAL_SELECTS));\n        this.registerEnhancedEventListeners();\n        this.mapData();\n        this.updateSaveButtonState();\n    }\n\n    /**\n     * Register event listeners on the enhanced selects. Must be done after they have been enhanced.\n     */\n    registerEnhancedEventListeners() {\n        document.querySelector(ModalQuestionBankBulkmove.SELECTORS.SEARCH_CATEGORY).addEventListener(\"change\", (e) => {\n            const targetCategoryId = e.currentTarget.value;\n            this.setTargetCategoryId(targetCategoryId);\n            this.rebuildOptions(this.getTargetBankContextId(), targetCategoryId);\n            this.updateSaveButtonState();\n        });\n\n        document.querySelector(ModalQuestionBankBulkmove.SELECTORS.SEARCH_BANK).addEventListener(\"change\", (e) => {\n            const selectedBankContextId = e.currentTarget.value;\n            this.setTargetBankContextId(selectedBankContextId);\n            this.rebuildOptions(selectedBankContextId, this.getTargetCategoryId());\n        });\n\n        this.getModal().on(\"click\", ModalQuestionBankBulkmove.SELECTORS.SAVE_BUTTON, (e) => {\n            e.preventDefault();\n            this.displayConfirm();\n        });\n    }\n\n    /**\n     * Set a map, so we can determine which bank belongs to which category.\n     */\n    mapData() {\n        const customSelectCategoryOptions = document.querySelectorAll(ModalQuestionBankBulkmove.SELECTORS.CATEGORY_OPTIONS);\n\n        if (customSelectCategoryOptions.length === 0) {\n            return;\n        }\n\n        const mappedData = [];\n\n        customSelectCategoryOptions.forEach((option) => {\n            mappedData[option.value] = option.dataset.bankContextid;\n        });\n\n        this.setMappedData(mappedData);\n    }\n\n    displayConfirm() {\n        this.setTitle(getString('confirm', 'core'));\n        this.setBody(getString('confirmmove', 'qbank_bulkmove'));\n        if (!this.hasFooterContent()) {\n            void this.configureFooter();\n        } else {\n            this.showFooter();\n        }\n    }\n\n    /**\n     * @return {Promise<void>}\n     */\n    async configureFooter() {\n        this.setFooter(Templates.render('qbank_bulkmove/bulk_move_footer', {}));\n        await this.getFooterPromise();\n\n        document.querySelector(ModalQuestionBankBulkmove.SELECTORS.CONFIRM_BUTTON).addEventListener(\"click\", (e) => {\n            e.preventDefault();\n            this.confirmed(this.getTargetBankContextId(), this.getTargetCategoryId());\n        });\n\n        document.querySelector(ModalQuestionBankBulkmove.SELECTORS.CANCEL_BUTTON).addEventListener(\"click\", (e) => {\n            e.preventDefault();\n            this.setTitle(getString('bulkmoveheader', 'qbank_bulkmove'));\n            this.setBodyContent(Templates.renderForPromise('core/loading',{}));\n            this.hideFooter();\n            this.display(this.getTargetBankContextId(), this.getTargetCategoryId());\n        });\n    }\n\n    /**\n     * Dynamically update all enhanced selects options based on what is selected.\n     *\n     * @param {integer} selectedBankContextId\n     * @param {integer} selectedCategoryId\n     */\n    rebuildOptions(selectedBankContextId, selectedCategoryId) {\n        const mappedData = this.getMappedData();\n        const customSelectCategoryOptions = document.querySelectorAll(ModalQuestionBankBulkmove.SELECTORS.CATEGORY_OPTIONS);\n\n        // Disable the category selector if no bank selected.\n        if (!selectedBankContextId) {\n            this.updateCategorySelector(false);\n        } else {\n            // Mark to be disabled all the categories not belonging to the selected bank.\n            // This will then be handled by the enhanced selects event handlers.\n            customSelectCategoryOptions.forEach((option) => {\n                if (option.dataset.bankContextid != selectedBankContextId) {\n                    option.dataset.enabled = 'disabled';\n                } else {\n                    option.dataset.enabled = 'enabled';\n                }\n            });\n            this.updateCategorySelector(true);\n        }\n\n        // De-select the selected category if it does not belong to the selected bank.\n        if (selectedCategoryId && selectedBankContextId && mappedData[selectedCategoryId] != selectedBankContextId) {\n            const selectedCategoryElement = document.querySelector(\n                '.search-categories span[role=\"option\"][data-value=\"' + selectedCategoryId + '\"]'\n            );\n            selectedCategoryElement.click();\n        }\n    }\n\n    /**\n     * @param {boolean} toEnable\n     */\n    updateCategorySelector(toEnable) {\n        const warning = document.querySelector(ModalQuestionBankBulkmove.SELECTORS.CATEGORY_WARNING);\n        const enhancedInput = document.querySelector(ModalQuestionBankBulkmove.SELECTORS.CATEGORY_ENHANCED_INPUT);\n        const suggestionButton = document.querySelector(ModalQuestionBankBulkmove.SELECTORS.CATEGORY_SUGGESTION);\n\n        if (toEnable) {\n            warning.classList.add('d-none');\n            enhancedInput.removeAttribute('disabled');\n            suggestionButton.classList.remove('d-none');\n        } else {\n            warning.classList.remove('d-none');\n            enhancedInput.setAttribute('disabled', 'disabled');\n            suggestionButton.classList.add('d-none');\n        }\n    }\n\n    /**\n     * Disable the button if the selected category is the same as the one the questions already belong to. Enable it otherwise.\n     */\n    updateSaveButtonState() {\n        const saveButton = document.querySelector(ModalQuestionBankBulkmove.SELECTORS.SAVE_BUTTON);\n        const targetCategoryId = this.getTargetCategoryId();\n\n        if (targetCategoryId && targetCategoryId != this.getCurrentCategoryId()) {\n            saveButton.removeAttribute('disabled');\n        } else {\n            saveButton.setAttribute('disabled', 'disabled');\n        }\n    }\n\n    /**\n     * @param {integer} targetContextId\n     * @param {integer} targetCategoryId\n     * @return {Promise<void>}\n     */\n    async confirmed(targetContextId, targetCategoryId) {\n        await this.setBody(Templates.render('core/loading', {}));\n        const qelements = document.querySelectorAll(ModalQuestionBankBulkmove.SELECTORS.SELECTED_QUESTIONS);\n        const questionids = [];\n        qelements.forEach((element) => {\n            if (element.checked) {\n                const name = element.getAttribute('name');\n                questionids.push(name.substr(1, name.length));\n            }\n        });\n        if (questionids.length === 0) {\n            await Notification.exception('No questions selected');\n        }\n\n        try {\n            window.location.href = await submitMoveQuestions(\n                targetContextId,\n                targetCategoryId,\n                questionids.join(),\n                window.location.href\n            );\n        } catch (error) {\n            await Notification.exception(error);\n        }\n    }\n\n    /**\n     * @param {NodeList} selects Custom select elements to enhance.\n     * @return {Promise<Promise[]>}\n     */\n    async enhanceSelects(selects) {\n        const placeholder = await getString('searchbyname', 'mod_quiz').then((placeholder) => {\n            return placeholder;\n        });\n\n        const enhanced = [];\n\n        if (selects.length > 0) {\n            for (let i = 0; i < selects.length; i++) {\n                enhanced.push(AutoComplete.enhance(\n                        selects.item(i),\n                        false,\n                        '',\n                        placeholder,\n                        false,\n                        true,\n                        '',\n                        true\n                    )\n                );\n            }\n\n            return Promise.all(enhanced);\n        }\n\n        return Promise.reject('No selects to enhance');\n    }\n}\n"],"names":["ModalQuestionBankBulkmove","Modal","contextId","categoryId","document","addEventListener","e","trigger","target","className","getAttribute","preventDefault","create","title","show","configure","modalConfig","setContextId","setTargetBankContextId","setTargetCategoryId","setCurrentCategoryId","removeOnClose","getContextId","this","getTargetCategoryId","currentCategoryId","getCurrentCategoryId","targetBankContextId","getTargetBankContextId","setMappedData","data","mappedData","getMappedData","display","super","currentBankContextId","bodyPromise","Fragment","loadFragment","setBody","enhanceSelects","querySelectorAll","SELECTORS","ORIGINAL_SELECTS","registerEnhancedEventListeners","mapData","updateSaveButtonState","querySelector","SEARCH_CATEGORY","targetCategoryId","currentTarget","value","rebuildOptions","SEARCH_BANK","selectedBankContextId","getModal","on","SAVE_BUTTON","displayConfirm","customSelectCategoryOptions","CATEGORY_OPTIONS","length","forEach","option","dataset","bankContextid","setTitle","hasFooterContent","showFooter","configureFooter","setFooter","Templates","render","getFooterPromise","CONFIRM_BUTTON","confirmed","CANCEL_BUTTON","setBodyContent","renderForPromise","hideFooter","selectedCategoryId","enabled","updateCategorySelector","click","toEnable","warning","CATEGORY_WARNING","enhancedInput","CATEGORY_ENHANCED_INPUT","suggestionButton","CATEGORY_SUGGESTION","classList","add","removeAttribute","remove","setAttribute","saveButton","targetContextId","qelements","SELECTED_QUESTIONS","questionids","element","checked","name","push","substr","Notification","exception","window","location","href","join","error","selects","placeholder","then","enhanced","i","AutoComplete","enhance","item","Promise","all","reject","BANK_OPTIONS"],"mappings":"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"}