{"version":3,"file":"modal_add_random_question.min.js","sources":["../src/modal_add_random_question.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Contain the logic for the add random question modal.\n *\n * @module     mod_quiz/modal_add_random_question\n * @copyright  2018 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport Modal from './add_question_modal';\nimport * as Notification from 'core/notification';\nimport * as Fragment from 'core/fragment';\nimport * as Templates from 'core/templates';\nimport * as FormChangeChecker from 'core_form/changechecker';\nimport {call as fetchMany} from 'core/ajax';\nimport Pending from 'core/pending';\n\nconst SELECTORS = {\n    ANCHOR: 'a[href]',\n    EXISTING_CATEGORY_CONTAINER: '[data-region=\"existing-category-container\"]',\n    EXISTING_CATEGORY_TAB: '#id_existingcategoryheader',\n    NEW_CATEGORY_CONTAINER: '[data-region=\"new-category-container\"]',\n    NEW_CATEGORY_TAB: '#id_newcategoryheader',\n    TAB_CONTENT: '[data-region=\"tab-content\"]',\n    ADD_ON_PAGE_FORM_ELEMENT: '[name=\"addonpage\"]',\n    ADD_RANDOM_BUTTON: 'input[type=\"submit\"][name=\"addrandom\"]',\n    ADD_NEW_CATEGORY_BUTTON: 'input[type=\"submit\"][name=\"newcategory\"]',\n    SUBMIT_BUTTON_ELEMENT: 'input[type=\"submit\"][name=\"addrandom\"], input[type=\"submit\"][name=\"newcategory\"]',\n    FORM_HEADER: 'legend',\n    SELECT_NUMBER_TO_ADD: '#menurandomcount',\n    NEW_CATEGORY_ELEMENT: '#categoryname',\n    PARENT_CATEGORY_ELEMENT: '#parentcategory',\n    FILTER_CONDITION_ELEMENT: '[data-filtercondition]',\n    FORM_ELEMENT: '#add_random_question_form',\n    MESSAGE_INPUT: '[name=\"message\"]',\n    SWITCH_TO_OTHER_BANK: 'button[data-action=\"switch-question-bank\"]',\n    NEW_BANKMOD_ID: 'data-newmodid',\n    BANK_SEARCH: '#searchbanks',\n};\n\nexport default class ModalAddRandomQuestion extends Modal {\n    static TYPE = 'mod_quiz-quiz-add-random-question';\n    static TEMPLATE = 'mod_quiz/modal_add_random_question';\n\n    /**\n     * Create the add random question modal.\n     *\n     * @param  {Number} contextId Current context id.\n     * @param  {Number} bankModId Current question bank course module id.\n     * @param  {string} category Category id and category context id comma separated.\n     * @param  {string} returnUrl URL to return to after form submission.\n     * @param  {Number} quizModId Current quiz course module id.\n     * @param  {Array} courseOpenBanks list of question banks from the current course that can be shared.\n     * @param  {Array} allOpenBanks list of question banks from other courses that can be shared.\n     * @param  {Array} recentlyViewedBanks list of recently viewed question banks that can be shared.\n     * @param  {boolean} showNewCategory Display the New category tab when selecting random questions.\n     */\n    static init(\n        contextId,\n        bankModId,\n        category,\n        returnUrl,\n        quizModId,\n        courseOpenBanks,\n        allOpenBanks,\n        recentlyViewedBanks,\n        showNewCategory = true\n    ) {\n        const selector = '.menu [data-action=\"addarandomquestion\"]';\n        document.addEventListener('click', (e) => {\n            const trigger = e.target.closest(selector);\n            if (!trigger) {\n                return;\n            }\n            e.preventDefault();\n\n            ModalAddRandomQuestion.create({\n                contextId,\n                bankModId,\n                category,\n                returnUrl,\n                quizModId,\n                courseOpenBanks,\n                allOpenBanks,\n                recentlyViewedBanks,\n\n                title: trigger.dataset.header,\n                addOnPage: trigger.dataset.addonpage,\n\n                templateContext: {\n                    hidden: showNewCategory,\n                },\n            });\n        });\n    }\n\n    /**\n     * Constructor for the Modal.\n     *\n     * @param {object} root The root jQuery element for the modal\n     */\n    constructor(root) {\n        super(root);\n        this.category = null;\n        this.returnUrl = null;\n        this.quizModId = null;\n        this.loadedForm = false;\n    }\n\n    configure(modalConfig) {\n        this.setCategory(modalConfig.category);\n        this.setReturnUrl(modalConfig.returnUrl);\n        this.setTemplateContext(modalConfig.templateContext);\n\n        super.configure(modalConfig);\n    }\n\n    /**\n     * Store the template context for later recreation of the modal.\n     *\n     * @param {Object} templateContext\n     */\n    setTemplateContext(templateContext) {\n        this.templateContext = templateContext;\n    }\n\n    /**\n     * Get the template context for recreation of the modal.\n     *\n     * @return {Object}\n     */\n    getTemplateContext() {\n        return this.templateContext;\n    }\n\n    /**\n     * Set the id of the page that the question should be added to\n     * when the user clicks the add to quiz link.\n     *\n     * @method setAddOnPageId\n     * @param {int} id\n     */\n    setAddOnPageId(id) {\n        super.setAddOnPageId(id);\n        this.getBody().find(SELECTORS.ADD_ON_PAGE_FORM_ELEMENT).val(id);\n    }\n\n    /**\n     * Set the category for this form. The category is a comma separated\n     * category id and category context id.\n     *\n     * @method setCategory\n     * @param {string} category\n     */\n    setCategory(category) {\n        this.category = category;\n    }\n\n    /**\n     * Returns the saved category.\n     *\n     * @method getCategory\n     * @return {string}\n     */\n    getCategory() {\n        return this.category;\n    }\n\n    /**\n     * Set the return URL for the form.\n     *\n     * @method setReturnUrl\n     * @param {string} url\n     */\n    setReturnUrl(url) {\n        this.returnUrl = url;\n    }\n\n    /**\n     * Returns the return URL for the form.\n     *\n     * @method getReturnUrl\n     * @return {string}\n     */\n    getReturnUrl() {\n        return this.returnUrl;\n    }\n\n    /**\n     * Moves a given form element inside (a child of) a given tab element.\n     *\n     * Hides the 'legend' (e.g. header) element of the form element because the\n     * tab has the name.\n     *\n     * Moves the submit button into a footer element at the bottom of the form\n     * element for styling purposes.\n     *\n     * @method moveContentIntoTab\n     * @param  {jquery} tabContent The form element to move into the tab.\n     * @param  {jquey} tabElement The tab element for the form element to move into.\n     */\n    moveContentIntoTab(tabContent, tabElement) {\n        // Hide the header because the tabs show us which part of the form we're\n        // looking at.\n        tabContent.find(SELECTORS.FORM_HEADER).addClass('hidden');\n        // Move the element inside a tab.\n        tabContent.wrap(tabElement);\n    }\n\n    /**\n     * Empty the tab content container and move all tabs from the form into the\n     * tab container element.\n     *\n     * @method moveTabsIntoTabContent\n     * @param  {jquery} form The form element.\n     */\n    moveTabsIntoTabContent(form) {\n        // Empty it to remove the loading icon.\n        const tabContent = this.getBody().find(SELECTORS.TAB_CONTENT).empty();\n        // Make sure all tabs are inside the tab content element.\n        form.find('[role=\"tabpanel\"]').wrapAll(tabContent);\n    }\n\n    /**\n     * Make sure all of the tabs have a cancel button in their fotter to sit along\n     * side the submit button.\n     *\n     * @method moveCancelButtonToTabs\n     * @param  {jquey} form The form element.\n     */\n    moveCancelButtonToTabs(form) {\n        const cancelButton = form.find(SELECTORS.CANCEL_BUTTON_ELEMENT).addClass('ml-1');\n        const tabFooters = form.find('[data-region=\"footer\"]');\n        // Remove the buttons container element.\n        cancelButton.closest(SELECTORS.BUTTON_CONTAINER).remove();\n        cancelButton.clone().appendTo(tabFooters);\n    }\n\n    /**\n     * Load the add random question form in a fragement and perform some transformation\n     * on the HTML to convert it into tabs for rendering in the modal.\n     *\n     * @method loadForm\n     * @return {promise} Resolved with form HTML and JS.\n     */\n    loadForm() {\n        const addonpage = this.getAddOnPageId();\n        const returnurl = this.getReturnUrl();\n        const quizmodid = this.getQuizModId();\n        const bankmodid = this.getBankModId();\n\n        return Fragment.loadFragment(\n            'mod_quiz',\n            'add_random_question_form',\n            this.getContextId(),\n            {\n                addonpage,\n                returnurl,\n                quizmodid,\n                bankmodid,\n            }\n        )\n        .then((html, js) =>{\n            const form = $(html);\n            const existingCategoryTabContent = form.find(SELECTORS.EXISTING_CATEGORY_TAB);\n            const existingCategoryTab = this.getBody().find(SELECTORS.EXISTING_CATEGORY_CONTAINER);\n            const newCategoryTabContent = form.find(SELECTORS.NEW_CATEGORY_TAB);\n            const newCategoryTab = this.getBody().find(SELECTORS.NEW_CATEGORY_CONTAINER);\n\n            // Transform the form into tabs for better rendering in the modal.\n            this.moveContentIntoTab(existingCategoryTabContent, existingCategoryTab);\n            this.moveContentIntoTab(newCategoryTabContent, newCategoryTab);\n            this.moveTabsIntoTabContent(form);\n\n            Templates.replaceNode(this.getBody().find(SELECTORS.TAB_CONTENT), form, js);\n            return;\n        })\n        .then(() => {\n            // Make sure the form change checker is disabled otherwise it'll stop the user from navigating away from the\n            // page once the modal is hidden.\n            FormChangeChecker.disableAllChecks();\n\n            // Add question to quiz.\n            this.getBody()[0].addEventListener('click', (e) => {\n                const button = e.target.closest(SELECTORS.SUBMIT_BUTTON_ELEMENT);\n                if (!button) {\n                    return;\n                }\n                e.preventDefault();\n\n                // Intercept the submission to adjust the POST params so that the quiz mod id is set and not the bank module id.\n                document.querySelector('#questionscontainer input[name=\"cmid\"]').setAttribute('name', this.getQuizModId());\n\n                // Add Random questions if the add random button was clicked.\n                const addRandomButton = e.target.closest(SELECTORS.ADD_RANDOM_BUTTON);\n                if (addRandomButton) {\n                    const randomcount = document.querySelector(SELECTORS.SELECT_NUMBER_TO_ADD).value;\n                    const filtercondition = document.querySelector(SELECTORS.FILTER_CONDITION_ELEMENT).dataset?.filtercondition;\n\n                    this.addQuestions(quizmodid, addonpage, randomcount, filtercondition, '', '');\n                    return;\n                }\n                // Add new category if the add category button was clicked.\n                const addCategoryButton = e.target.closest(SELECTORS.ADD_NEW_CATEGORY_BUTTON);\n                if (addCategoryButton) {\n                    this.addQuestions(\n                        quizmodid,\n                        addonpage,\n                        1,\n                        '',\n                        document.querySelector(SELECTORS.NEW_CATEGORY_ELEMENT).value,\n                        document.querySelector(SELECTORS.PARENT_CATEGORY_ELEMENT).value\n                    );\n                    return;\n                }\n            });\n\n            this.getModal().on('click', SELECTORS.SWITCH_TO_OTHER_BANK, () => {\n                this.handleSwitchBankContentReload(SELECTORS.BANK_SEARCH).then(function (ModalQuizQuestionBank) {\n                    $(SELECTORS.BANK_SEARCH).on('change', (e) => {\n                        const bankModId = $(e.currentTarget).val();\n                        // Have to recreate the modal as we have already used the body for the switch bank content.\n                        if (bankModId > 0) {\n                            ModalAddRandomQuestion.create({\n                                'contextId': ModalQuizQuestionBank.getContextId(),\n                                'bankModId': bankModId,\n                                'category': ModalQuizQuestionBank.getCategory(),\n                                'returnUrl': ModalQuizQuestionBank.getReturnUrl(),\n                                'quizModId': ModalQuizQuestionBank.getQuizModId(),\n                                'courseOpenBanks': ModalQuizQuestionBank.getCourseOpenBanks(),\n                                'allOpenBanks': ModalQuizQuestionBank.getAllOpenBanks(),\n                                'recentlyViewedBanks': ModalQuizQuestionBank.getRecentlyViewedBanks(),\n                                'title': ModalQuizQuestionBank.getTitle(),\n                                'addOnPage': ModalQuizQuestionBank.getAddOnPageId(),\n                                'templateContext': ModalQuizQuestionBank.getTemplateContext(),\n                            }).then(ModalQuizQuestionBank.destroy());\n                        }\n                    });\n                });\n            });\n\n            this.getModal().on('click', SELECTORS.ANCHOR, (e) => {\n                const anchorElement = $(e.currentTarget);\n                // Have to recreate the modal as we have already used the body for the switch bank content.\n                if (anchorElement.closest('a[' + SELECTORS.NEW_BANKMOD_ID + ']').length) {\n                    ModalAddRandomQuestion.create({\n                        'contextId': this.getContextId(),\n                        'bankModId': anchorElement.attr(SELECTORS.NEW_BANKMOD_ID),\n                        'category': this.getCategory(),\n                        'returnUrl': this.getReturnUrl(),\n                        'quizModId': this.getQuizModId(),\n                        'courseOpenBanks': this.getCourseOpenBanks(),\n                        'allOpenBanks': this.getAllOpenBanks(),\n                        'recentlyViewedBanks': this.getRecentlyViewedBanks(),\n                        'title': this.getTitle(),\n                        'addOnPage': this.getAddOnPageId(),\n                        'templateContext': this.getTemplateContext(),\n                    }).then(this.destroy());\n                }\n            });\n        })\n        .catch(Notification.exception);\n    }\n\n    /**\n     * Call web service function to add random questions\n     *\n     * @param {number} quizmodid the course module id of the quiz to add questions to.\n     * @param {number} addonpage the page where random questions will be added to\n     * @param {number} randomcount Number of random questions\n     * @param {string} filtercondition Filter condition\n     * @param {string} newcategory add new category\n     * @param {string} parentcategory parent category of new category\n     */\n    async addQuestions(\n        quizmodid,\n        addonpage,\n        randomcount,\n        filtercondition,\n        newcategory,\n        parentcategory\n    ) {\n        // We do not need to resolve this Pending because the form submission will result in a page redirect.\n        new Pending('mod-quiz/modal_add_random_questions');\n        const call = {\n            methodname: 'mod_quiz_add_random_questions',\n            args: {\n                cmid: quizmodid,\n                addonpage,\n                randomcount,\n                filtercondition,\n                newcategory,\n                parentcategory,\n            }\n        };\n        try {\n            const response = await fetchMany([call])[0];\n            const form = document.querySelector(SELECTORS.FORM_ELEMENT);\n            const messageInput = form.querySelector(SELECTORS.MESSAGE_INPUT);\n            messageInput.value = response.message;\n            form.submit();\n        } catch (e) {\n            Notification.exception(e);\n        }\n    }\n\n    /**\n     * Override the modal show function to load the form when this modal is first\n     * shown.\n     *\n     * @method show\n     */\n    show() {\n        super.show(this);\n\n        if (!this.loadedForm) {\n            this.loadForm(window.location.search);\n            this.loadedForm = true;\n        }\n    }\n}\n\nModalAddRandomQuestion.registerModalType();\n"],"names":["SELECTORS","ANCHOR","EXISTING_CATEGORY_CONTAINER","EXISTING_CATEGORY_TAB","NEW_CATEGORY_CONTAINER","NEW_CATEGORY_TAB","TAB_CONTENT","ADD_ON_PAGE_FORM_ELEMENT","ADD_RANDOM_BUTTON","ADD_NEW_CATEGORY_BUTTON","SUBMIT_BUTTON_ELEMENT","FORM_HEADER","SELECT_NUMBER_TO_ADD","NEW_CATEGORY_ELEMENT","PARENT_CATEGORY_ELEMENT","FILTER_CONDITION_ELEMENT","FORM_ELEMENT","MESSAGE_INPUT","SWITCH_TO_OTHER_BANK","NEW_BANKMOD_ID","BANK_SEARCH","ModalAddRandomQuestion","Modal","contextId","bankModId","category","returnUrl","quizModId","courseOpenBanks","allOpenBanks","recentlyViewedBanks","showNewCategory","document","addEventListener","e","trigger","target","closest","preventDefault","create","title","dataset","header","addOnPage","addonpage","templateContext","hidden","constructor","root","loadedForm","configure","modalConfig","setCategory","setReturnUrl","setTemplateContext","getTemplateContext","this","setAddOnPageId","id","getBody","find","val","getCategory","url","getReturnUrl","moveContentIntoTab","tabContent","tabElement","addClass","wrap","moveTabsIntoTabContent","form","empty","wrapAll","moveCancelButtonToTabs","cancelButton","CANCEL_BUTTON_ELEMENT","tabFooters","BUTTON_CONTAINER","remove","clone","appendTo","loadForm","getAddOnPageId","returnurl","quizmodid","getQuizModId","bankmodid","getBankModId","Fragment","loadFragment","getContextId","then","html","js","existingCategoryTabContent","existingCategoryTab","newCategoryTabContent","newCategoryTab","Templates","replaceNode","FormChangeChecker","disableAllChecks","querySelector","setAttribute","randomcount","value","filtercondition","_document$querySelect","addQuestions","getModal","on","handleSwitchBankContentReload","ModalQuizQuestionBank","currentTarget","getCourseOpenBanks","getAllOpenBanks","getRecentlyViewedBanks","getTitle","destroy","anchorElement","length","attr","catch","Notification","exception","newcategory","parentcategory","Pending","call","methodname","args","cmid","response","message","submit","show","window","location","search","registerModalType"],"mappings":"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"}